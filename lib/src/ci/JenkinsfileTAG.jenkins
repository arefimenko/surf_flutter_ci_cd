//Библиотека общих классов
@Library("DevOps-CI-CD-Library@master") _
//Переменная для пропуска 
SKIP_JOB = false
//Массив для jarvis request body 
stageResultsBody = []
//--------------------------------------------------------------------------------------------------------------------------------------------------
pipeline {
    options {     
        // Указываем дни и кол-во хранимых сборок;
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '30'))

        // Запрет запуска сборки при перезапуске контролёра ;
        disableResume()
    }
    agent {
        // Указываем где должна собираться сборка (только для steps где явно не указан label);
        // Актуально для сборки андроид, ios labels задаётся environment
        label 'android'                                                                            
    }
    parameters {
        gitParameter name: 'repoTag', 
                     type: 'PT_BRANCH_TAG',
                     description: 'Выберите TAG для сборки',
                     selectedValue: 'NONE',
                     sortMode: 'DESCENDING_SMART'

        booleanParam(name: 'DeployFirebaseIOS', defaultValue: true,  description: 'Выгрузка в Firebase iOS')
        booleanParam(name: 'TestFlightIOS',     defaultValue: false, description: 'Выгрузка в TestFlight iOS')
    }
    environment {
        //Метка сборочной ноды для сборки iOS
        IOS_LABEL = "ios-13"

        //Креды Github Builder. Находятся в Jenkins -> Manage Credentials.
        git_cred   = 'jenkins-surf-builder-token'

        //Версия ruby
        rvm_version = '2.7.4'

        //Образ докера на DockerHub в котором собираем проект. Пример: surfstudio/flutter:2.2.2
        docker_img = 'nexus.surfstudio.ru/flutter:3.0.1-android'

        //Обязательно указывваем репу, в  противном случае не будет запускаться с параметрами.
        repoUrl    = 'https://github.com/surfstudio/love-republic-flutter' 

        //Ключ и его значение, для сборки проекта 
        ANDROID_RELEASE_KEYSTORE            = 'temp_flutter_release_keystore'
        ANDROID_RELEASE_KEYSTORE_PROPERTIES = 'temp_flutter_release_keystore.properties'
    }
    //Тригер сборки и переменные прилетевшие с вебхука;
    triggers { 
        GenericTrigger(
        genericVariables: [
            [key: 'sourceBranch', value: '$.pull_request.head.ref'],
            [key: 'repoUrl', value: '$.repository.html_url'],
            [key: 'prUrl', value: '$.pull_request.html_url'],
            [key: 'repoTag', value: '$.ref'],
            [key: 'currentBranch', value: '$.master_branch']
        ],
        causeString: 'Triggered by Github',
        //Regexp для фильтрации запуска
        regexpFilterText: ("\$repoUrl \$repoTag_0"),
        //Указать репу проекта 
        regexpFilterExpression: ("https://github.com/surfstudio/love-republic-flutter (.*)?\\d{1,4}\\.\\d{1,4}\\.\\d{1,4}(.*)?"),
        printContributedVariables: true,
        printPostContent: true
        )
    }
//----------------------------------------------------------Init-----------------------------------------------------------------------------------
   stages {
        stage('Init') {
            steps {
                script {
                    //Отмечаем где собираем проект
                    currentBuild.description = "Building on ${env.NODE_NAME}, TAG: ${env.repoTag}"
                }
            }
            post {
                always {
                    script{
                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                    }
                }
            }              
        }
//----------------------------------------------------------Checkout-------------------------------------------------------------------------------
        stage('Checkout'){
            steps {
                script {
                    try {
                        sh "git reset --merge"
                        sh "git reset"
                        sh "git checkout ."
                        sh "git clean -fdx"
                    } catch (Exception ex) {
                        echo "^^^^ Exception occurred: " + ex.toString()
                    }

                    git url: "${env.repoUrl}",                                                                                   
                        credentialsId: "${env.git_cred}",
                        poll: true

                    sh "git checkout tags/${env.repoTag}"
                
                    // Проверяем не запущен ли job автоматически с коммитом skip ci;
                    String resultSkipCi
                    try {
                        resultSkipCi = sh (script: "git log -1 --pretty=%B | grep 'skip ci'", returnStdout: true)
                    } catch (Exception ex) {
                        echo "No 'skip ci' to commit message"
                    }

                    //Если есть в комите skip ci и prUrl не пустая (Определяем что джоб запущен автоматически а не в ручную)
                    if (resultSkipCi && env.prUrl) {
                        env.skipJob = true 
                    }
                }
            }
            post {
                always {
                    script{
                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                    }
                }
            }              
        }        
//----------------------------------------------------------Parallel-----------------------------------------------------------------------------------------------
//----------------------------------------------------------Android------------------------------------------------------------------------------------------------
        stage("Parallel") {
            when {
                expression { env.skipJob != 'true' }
            }   
            parallel {
                stage("Android") {
                    stages {
//----------------------------------------------------------Calculate/Update Version Codes (Android)--------------------------------------------------------------------
                        stage('Calculate/Update Version Codes (Android)'){
                            steps {
                                script{
                                    //Получаем имя предыдущего тэга и номер сборки
                                    oldTagName = sh (script: "cat pubspec.yaml | grep -oP 'version: \\K.*' | cut -d'+' -f1", returnStdout: true)
                                    oldVersion = sh (script: "cat pubspec.yaml | grep -oP 'version: \\K.*' | cut -d'+' -f2", returnStdout: true)

                                    //Удаляем знак переноса в конце строки
                                    oldVersion = oldVersion.substring(0, oldVersion.length()-1)
                                    oldTagName = oldTagName.substring(0, oldTagName.length()-1)

                                    //Инкрементируем номер сборки
                                    newOldVersion = oldVersion.toInteger() + 1

                                    //Меняем значения в pubspec.yaml
                                    sh "sed -i \'s/version: ${oldTagName}+${oldVersion}/version: ${env.repoTag}+${newOldVersion}/\' pubspec.yaml"
                                }
                            }
                            post {
                                always {
                                    script{
                                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                                    }
                                }
                            }                              
                        }
//----------------------------------------------------------Build Android----------------------------------------------------------------------------------------
                        stage('Build Android'){
                            agent {
                                docker {
                                    registryUrl 'https://nexus.surfstudio.ru/'
                                    registryCredentialsId 'nexus.surfstudio.ru'
                                    args "-v /home/jenkins/.gitconfig:/etc/gitconfig:rw,z"
                                    image "${env.docker_img}"
                                    reuseNode true
                                }
                            }                            
                            steps {
                                withCredentials([
                                    file(credentialsId: "${env.ANDROID_RELEASE_KEYSTORE}",            variable: 'KEYSTORE'),
                                    file(credentialsId: "${env.ANDROID_RELEASE_KEYSTORE_PROPERTIES}", variable: 'KEYSTORE_PROPERTIES')
                                ]){
                                    script {
                                        //Записываем свойство ключа;
                                        properties = readFile(KEYSTORE_PROPERTIES)
                                        vars = properties.tokenize('\n')
                                        //Устанавливаем переменые среды;
                                        withEnv(vars) {
                                            withEnv(["storeFile=$KEYSTORE"]) {
                                                sh "chmod +x ./script/android/build.sh"
                                                sh "script/android/build.sh -qa"
                                            }
                                        }
                                    }
                                }
                            }
                            post {
                                success {
                                    //Сохраняем артефакты
                                    archiveArtifacts artifacts: '**/*.apk, app/build/outputs/flutter-apk/*.aab', allowEmptyArchive: true
                                }                                
                                always {
                                    script{
                                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                                    }
                                }
                            }                             
                        }
//----------------------------------------------------------Beta Upload Android----------------------------------------------------------------------------------
                        stage('Beta Upload Android'){
                            steps {
                                withCredentials([
                                    string(credentialsId: 'firebase_token_love_republic', variable: 'FIREBASE_TOKEN')
                                ]){
                                    script {
                                        sh "set +x; source ~/.bashrc; source ~/.rvm/scripts/rvm; rvm use ${env.rvm_version}; make -C android/ init && make -C android/ beta"
                                    }
                                }                                
                            }
                            post {
                                always {
                                    script{
                                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                                    }
                                }
                            }                              
                        }                                                                                                   
                    }
                }
//----------------------------------------------------------iOS-------------------------------------------------------------------------------------------------
                stage("iOS") {
                    agent {
                        //Где собираем iOS;
                        label "${env.IOS_LABEL}"
                    }
                    stages {
//----------------------------------------------------------Checkout iOS-------------------------------------------------------------------------------
                        stage('Checkout iOS'){
                            steps {
                                script {
                                    sh "echo Build as \$(hostname) node"

                                    try {
                                        sh "git reset --merge"
                                        sh "git reset"
                                        sh "git checkout ."
                                        sh "git clean -fdx"
                                    } catch (Exception ex) {
                                        echo "^^^^ Exception occurred: " + ex.toString()
                                    }

                                    git url: "${env.repoUrl}",                                                                                   
                                        credentialsId: "${env.git_cred}",
                                        poll: true

                                    sh "git checkout tags/${env.repoTag}"
                                }
                            }
                            post {
                                always {
                                    script{
                                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                                    }
                                }
                            }                                
                        }
//----------------------------------------------------------Calculate/Update Version Codes (iOS)--------------------------------------------------------------------
                        stage('Calculate/Update Version Codes (iOS)'){
                            steps {
                                script{
                                    //Получаем имя предыдущего тэга и номер сборки
                                    oldTagName = sh (script: "cat pubspec.yaml | grep -o 'version: .*' | cut -d' ' -f2 | cut -d'+' -f1", returnStdout: true)
                                    oldVersion = sh (script: "cat pubspec.yaml | grep -o 'version: .*' | cut -d' ' -f2 | cut -d'+' -f2", returnStdout: true)

                                    //Удаляем знак переноса в конце строки
                                    oldVersion = oldVersion.substring(0, oldVersion.length()-1)
                                    oldTagName = oldTagName.substring(0, oldTagName.length()-1)

                                    //Инкрементируем номер сборки
                                    newOldVersion = oldVersion.toInteger() + 1

                                    //Меняем значения в pubspec.yaml
                                    sh "sed -i -e \'s/version: ${oldTagName}+${oldVersion}/version: ${env.repoTag}+${newOldVersion}/\' pubspec.yaml"
                                }
                            }
                            post {
                                always {
                                    script{
                                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                                    }
                                }
                            }                                
                        }
//----------------------------------------------------------Checkout Flutter Project Version (iOS)-----------------------------------------------------------
                        stage('Checkout Flutter Project Version (iOS)'){
                            steps {
                                script{
                                    sh "chmod +x ./script/version.sh"
                                    sh "./script/version.sh"
                                }
                            }
                            post {
                                always {
                                    script{
                                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                                    }
                                }
                            }                             
                        }
//----------------------------------------------------------Build iOS BETA-----------------------------------------------------------------------------------
                        stage('Build iOS BETA'){
                            when {
                                environment name: "DeployFirebaseIOS", value: "true"
                            } 
                            steps {
                                withCredentials([
                                    string(credentialsId: 'add420b4-78fc-4db0-95e9-eeb0eac780f6', variable: 'KEYCHAIN_PASS'),
                                    file(credentialsId: 'Love_Republic_Developer_P12_Key', variable: 'DEVELOPER_P12_KEY'),
                                    string(credentialsId: 'Love_Republic_Developer_P12_Key_Pass', variable: 'DEVELOPER_P12_KEY_PASS')
                                ]){
                                    script{
                                        sh "security default-keychain -s /Users/jenkins/Library/Keychains/login.keychain-db"
                                        sh "security -v unlock-keychain -p $KEYCHAIN_PASS"
                                        sh 'security import "$DEVELOPER_P12_KEY" -P "$DEVELOPER_P12_KEY_PASS" -T /usr/bin/codesign -T /usr/bin/security'
                                        sh "security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASS ~/Library/Keychains/login.keychain-db"
                                        sh "set +x; source ~/.bashrc; source ~/.rvm/scripts/rvm; rvm use ${env.rvm_version}; make -C ios/ init"
                                        sh "set +x; source ~/.bashrc; source ~/.rvm/scripts/rvm; rvm use ${env.rvm_version}; sh script/ios/build.sh -qa"
                                    }
                                }
                            }
                            post {
                                always {
                                    script{
                                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                                    }
                                }
                            }                             
                        }
//----------------------------------------------------------Beta Upload iOS-----------------------------------------------------------------------------------
                        stage('Beta Upload iOS'){
                            when {
                                environment name: "DeployFirebaseIOS", value: "true"
                            }                             
                            steps {
                                withCredentials([
                                    string(credentialsId: 'firebase_token_love_republic',    variable: 'FIREBASE_TOKEN'),
                                    string(credentialsId: 'LoveRepublic_AuthKey_VY5982498R', variable: 'APP_STORE_CONNECT_API_KEY')
                                ]){
                                    script {
                                        sh "set +x; source ~/.bashrc; source ~/.rvm/scripts/rvm; rvm use ${env.rvm_version}; make -C ios/ beta"
                                    }
                                }                                 
                            }
                            post {
                                always {
                                    script{
                                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                                    }
                                }
                            }                             
                        }
//----------------------------------------------------------Build iOS TestFlight-------------------------------------------------------------------------------
                        stage('Build iOS TestFlight'){
                            when {
                                environment name: "TestFlightIOS", value: "true"
                            }                             
                            steps {
                                withCredentials([
                                    string(credentialsId: 'add420b4-78fc-4db0-95e9-eeb0eac780f6', variable: 'KEYCHAIN_PASS'),
                                    file(credentialsId: 'SurfDevelopmentPrivateKey', variable: 'DEVELOPER_P12_KEY'),
                                    string(credentialsId: 'Apple-ASC-API-key-builder', variable: 'APP_STORE_CONNECT_API_KEY'),
                                    string(credentialsId: 'firebase_token_love_republic', variable: 'FIREBASE_TOKEN')
                                ]){
                                    script{
                                    //     sh (script: "security default-keychain -s /Users/jenkins/Library/Keychains/login.keychain-db", returnStdout: true)
                                    //     sh (script: "security -v unlock-keychain -p $KEYCHAIN_PASS", returnStdout: true)
                                    //     sh (script: 'security import "$DEVELOPER_P12_KEY" -P "" -T /usr/bin/codesign -T /usr/bin/security', returnStdout: true)
                                    //     sh (script: "security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASS ~/Library/Keychains/login.keychain-db", returnStdout: true)
                                        sh "set +x; source ~/.bashrc; source ~/.rvm/scripts/rvm; rvm use ${rvm_version}; make -C ios/ init"
                                        sh "set +x; source ~/.bashrc; source ~/.rvm/scripts/rvm; rvm use ${rvm_version}; sh script/ios/build.sh -release"
                                    }
                                }
                            }
                            post {
                                always {
                                    script{
                                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                                    }
                                }
                            }                                 
                        }
//----------------------------------------------------------TestFlight Upload iOS-------------------------------------------------------------------------------
                        stage('TestFlight Upload iOS'){
                            when {
                                environment name: "TestFlightIOS", value: "true"
                            }                               
                            steps {
                                withCredentials([
                                    string(credentialsId: 'Apple-ASC-API-key-builder', variable: 'APP_STORE_CONNECT_API_KEY')
                                ]){
                                    script {
                                        sh "set +x; source ~/.bashrc; source ~/.rvm/scripts/rvm; rvm use ${rvm_version}; make -C ios/ release"
                                    }
                                } 
                            }
                            post {
                                always {
                                    script{
                                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                                    }
                                }
                            }                                 
                        }                                                                                                                                                                                     
                    }
                }
            }
        }
//----------------------------------------------------------Version Push-----------------------------------------------------------------------------------
        stage('Version Push') {
            when {
                expression { env.skipJob != 'true' }
            }            
            steps {
                script {
                    //Проверяем если запущен в ручную, тогда узнаем имя ветки
                    if (env.currentBranch == null){
                        //Получаем хеш комита
                        currentSHA = sh (script: "git rev-parse $env.repoTag", returnStdout: true)
                        currentSHA = currentSHA.substring(0, currentSHA.length()-1)
                        //Получаем ветку в которую он смотрит
                        currentBranch = sh (script: "git branch -a --contains $currentSHA | grep -oP 'remotes/origin/\\K.*' | tail -1", returnStdout: true)
                        currentBranch = currentBranch.substring(0, currentBranch.length()-1)
                        echo currentBranch
                    }

                    //Переставляем TAG
                    sh "git stash"
                    sh "git checkout -B ${currentBranch} origin/${currentBranch}"
                    sh "git stash apply"

                    sh "git config --global user.name \"builder-surf\""
                    sh "git config --global user.email \"builder@surfstudio.ru\""

                    //Получаем имя предыдущего тэга и номер сборки
                    oldTagName = sh (script: "cat pubspec.yaml | grep -oP 'version: \\K.*' | cut -d'+' -f1", returnStdout: true)
                    oldVersion = sh (script: "cat pubspec.yaml | grep -oP 'version: \\K.*' | cut -d'+' -f2", returnStdout: true)

                    //Удаляем знак переноса в конце строки
                    oldVersion = oldVersion.substring(0, oldVersion.length()-1)
                    oldTagName = oldTagName.substring(0, oldTagName.length()-1)

                    //Инкрементируем номер сборки
                    newOldVersion = oldVersion.toInteger() + 1

                    //Меняем значения в pubspec.yaml
                    sh "sed -i \'s/version: ${oldTagName}+${oldVersion}/version: ${env.repoTag}+${newOldVersion}/\' pubspec.yaml"

                    sh "git commit -a -m \"Change version to ${env.repoTag} (${newOldVersion}) [skip ci] [version]\""
                    sh "git push ${env.repoUrl}"
                    sh "git tag -f ${env.repoTag}"
                    sh "git push ${env.repoUrl} -f --tags"
                }
            }
            post {
                always {
                    script{
                        echo "Set stage ${env.STAGE_NAME} ${currentBuild.currentResult}"
                        stageResultsBody.add("name": "${env.STAGE_NAME}", "status": "${currentBuild.currentResult}")
                    }
                }
            }               
        }        
    }
    post{
        always{
            //Отправляем статус в jarvis
            createVersionAndNotify(stage_results_body: stageResultsBody)
            //Чистим рабочий каталог
            cleanWs()        
        }
    }    
}
//----------------------------------------------------------Finish--------------------------------------------------------------------------------------------------------
