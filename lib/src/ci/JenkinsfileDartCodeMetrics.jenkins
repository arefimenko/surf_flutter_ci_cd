//--------------------------------------------------------------------------------------------------------------------------------------------------
pipeline {
    options {     
        // Указываем дни и кол-во хранимых сборок;
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '30'))

        // Запрет запуска сборки при перезапуске контролёра ;
        disableResume()
    }
    agent {
        // Указывваем где должна собираться сборка;
	    label 'android'  
    }
    triggers {
        cron('H 12 * * 6')
    }    
    environment {
        //Образ докера в котором собираем проект
        docker_img   = 'nexus.surfstudio.ru/flutter:3.0.1-android'

        //Креды Github Builder
        git_cred     = 'jenkins-surf-builder-token'

        //Репозиторий проекта с которого собираемся собирать метрики        
        repoUrl      = 'https://github.com/surfstudio/love-republic-flutter'

        //Репозиторий где храним метрики
        dcm_repo_url = 'https://github.com/surfstudio/flutter-project-metrics'
    }
//----------------------------------------------------------Init-----------------------------------------------------------------------------------
    stages {
        stage('Init') {
            steps {
                script {
                    currentBuild.description = "Building on ${env.NODE_NAME}"

                    //Определяем ветку по умолчанию c которой будем собирать метрики
                    default_branch = sh (script: "git ls-remote --symref ${env.repoUrl} HEAD | awk '/^ref:/ {sub(/refs\\/heads\\//, \"\", \$2); print \$2}'", returnStdout: true)
                    echo "${default_branch}"

                    //Получаем имя проекта
                    repo_name = env.repoUrl.tokenize("/")[-1]
                }                    
            }
            post {
                always {
                    echo "Stage Name: ${env.STAGE_NAME}, Stage Status: ${currentBuild.currentResult}"
                }                
            }
        }
//----------------------------------------------------------Checkout-------------------------------------------------------------------------------
        stage('Checkout'){
            steps {
                script {
                    try {
                        sh (script: "git reset --merge", returnStdout: true)
                        sh (script: "git reset", returnStdout: true)
                        sh (script: "git checkout .", returnStdout: true)
                        sh (script: "git clean -fdx", returnStdout: true)
                    } catch (Exception ex) {
                        echo "^^^^ Exception occurred: " + ex.toString()
                    }
                }

                git url: "${env.repoUrl}",                                                                                   
                    credentialsId: "${env.git_cred}",
                    branch: "${default_branch}"
            }
            post {
                always {
                    echo "Stage Name: ${env.STAGE_NAME}, Stage Status: ${currentBuild.currentResult}"
                }   
            }
        }
//----------------------------------------------------------Install Dart. Activate and Get Dart Code Metrics-------------------------------------------------------------------------------
        stage('Install Dart. Activate and Get Dart Code Metrics'){
            agent {
                docker {
                    registryUrl "https://nexus.surfstudio.ru/"
                    registryCredentialsId "nexus.surfstudio.ru"
                    args "-v /home/jenkins/.gitconfig:/etc/gitconfig:rw,z"
                    image "${env.docker_img}"
                    reuseNode true
                }
            }          
            steps {
                script {
                    sh (script: "git clone --branch stable https://github.com/dart-lang/sdk.git", returnStdout: true)
                    sh (script: "cd sdk/sdk/bin/", returnStdout: true)
                    sh (script: "dart pub global activate dart_code_metrics", returnStdout: true)
                    sh (script: "dart pub global run dart_code_metrics:metrics -r json lib > metrics.json", returnStdout: true)
                    sh (script: "dart pub global run dart_code_metrics:metrics -r html lib", returnStdout: true)
                }
            }
            post {
                always {
                    echo "Stage Name: ${env.STAGE_NAME}, Stage Status: ${currentBuild.currentResult}"
                }   
            }
        }
//----------------------------------------------------------Push Dart Code Metrics-------------------------------------------------------------------------------
        stage('Push Dart Code Metrics'){
            steps {
                //Делаем чекаут во временный каталог
                dir("tmp-dcm"){
                    script {
                        git url: "${env.dcm_repo_url}",
                            credentialsId: "${env.git_cred}",
                            branch: 'main'

                        //Год
                        year_number = sh (script: "date +'%Y'", returnStdout: true)
                        year_number = year_number.substring(0, year_number.length()-1)

                        //Номер недели
                        week_number = sh (script: "date +'%U'", returnStdout: true)
                        week_number = week_number.substring(0, week_number.length()-1)                            

                        //Создаём папку с номером недели
                        sh (script: "mkdir -p metrics/${repo_name}/${year_number}/${week_number}", returnStdout: true)

                        //Копируем json
                        sh (script: "cp -r ../metrics.json metrics/${repo_name}/${year_number}/${week_number}", returnStdout: true)

                        //Копируем html
                        sh (script: "cp -r ../metrics metrics/${repo_name}/${year_number}/${week_number}", returnStdout: true)  

                        //Пушим изменения
                        sh (script: "git add metrics/${repo_name}/${year_number}/${week_number}", returnStdout: true)
                        sh (script: "git commit -a -m \"Added new metrics for week ${week_number}\"", returnStdout: true)
                        sh (script: "git push ${env.dcm_repo_url}", returnStdout: true)
                    }
                }
            }
            post {
                always {
                    echo "Stage Name: ${env.STAGE_NAME}, Stage Status: ${currentBuild.currentResult}"
                }   
            }
        }                         
    }
    post{
        always{
            //Чистим рабочий каталог
            cleanWs()        
        }
    }      
}
